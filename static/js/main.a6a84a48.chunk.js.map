{"version":3,"sources":["App.js","serviceWorker.js","state.js","index.js","ipfs.js"],"names":["sleep","ms","Promise","resolve","setTimeout","App","state","chan","window","location","hash","slice","undefined","uiType","this","setState","Math","random","toString","navigator","mediaDevices","getUserMedia","audio","video","stream","document","getElementById","srcObject","play","onclick","canvas","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","data","getImageData","code","jsQR","console","log","_context2","t0","props","classes","qrUrl","href","replace","react_default","a","createElement","style","display","textAlign","float","marginLeft","lib_default","value","Typography_default","variant","gutterBottom","position","left","top","textShadow","maxWidth","innerWidth","maxHeight","innerHeight","id","_this2","renderComputer","renderCamera","Button_default","color","className","button","onClick","startComputer","startCamera","component","react_markdown_default","source","Component","withStyles","theme","margin","spacing","unit","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","Immutable","fromJS","hello","actions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","arguments","length","action","type","applyMiddleware","thunk","installStyles","createMuiTheme","typography","useNextVariants","ReactDOM","render","es","styles","src_App","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","node","require","EXPERIMENTAL","pubsub","dht","Addresses","Swarm","ipfs","on","Object","_home_rasmuserik_cloud_app_2019_stop_motion_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_rasmuserik_cloud_app_2019_stop_motion_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","subscribe","msg","TextDecoder","decode","publish","Buffer","from","userAgent","stop"],"mappings":"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","file":"static/js/main.a6a84a48.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport jsQR from \"jsqr\";\nimport ReactMarkdown from \"react-markdown\";\nimport QRCode from \"qrcode.react\";\nimport { node } from \"./ipfs\";\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nclass App extends Component {\n  state = {\n    chan: window.location.hash.slice(1) || undefined,\n    uiType: undefined\n  };\n  async startComputer() {\n    let { chan } = this.state;\n    this.setState({ uiType: \"computer\" });\n\n    if (!chan) {\n      chan = Math.random()\n        .toString(36)\n        .slice(2);\n      this.setState({ chan });\n    }\n  }\n  async startCamera() {\n    this.setState({ uiType: \"camera\" });\n    await sleep(300);\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: true\n      });\n      const video = document.getElementById(\"cameraPreview\");\n      video.srcObject = stream;\n      video.play();\n      window.stream = stream;\n      video.onclick = () => {\n        const canvas = document.getElementById(\"capturedFrame\");\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const { data } = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const code = jsQR(data, canvas.width, canvas.height);\n        console.log(\"jsqr\", code);\n      };\n    } catch (e) {\n      console.log(\"video error\", e);\n      console.log(e);\n      throw e;\n    }\n  }\n  renderComputer() {\n    const { classes } = this.props;\n    const { chan } = this.state;\n    const qrUrl = window.location.href.replace(/#.*./, \"\") + \"#\" + chan;\n    return (\n      <center>\n        <br />\n        <div style={{ display: \"inline-block\", width: 520, textAlign: \"left\" }}>\n          <div style={{ float: \"right\", marginLeft: 8 }}>\n            <QRCode value={qrUrl} />\n          </div>\n          <Typography variant=\"h3\" gutterBottom={true}>\n            Connect camera\n          </Typography>\n          <Typography>\n            To connect a camera, open the web-app, scan the QR-code, or open the\n            following url on your mobile phone / device: <br />{\" \"}\n            <code>{qrUrl}</code>\n            <br />\n          </Typography>\n        </div>\n      </center>\n    );\n  }\n  renderCamera() {\n    const { classes } = this.props;\n    const { chan } = this.state;\n    return (\n      <center>\n        {!chan && (\n          <div\n            style={{\n              position: \"fixed\",\n              left: \"50%\",\n              width: 320,\n              marginLeft: -160,\n              top: 50,\n              display: \"inline-block\",\n              textShadow: \"1px 1px 4px white\"\n            }}\n          >\n            <Typography variant=\"h4\" gutterBottom={true}>\n              Point the camera to the QR-code on the computer to connect.\n            </Typography>\n          </div>\n        )}\n        <video\n          style={{ maxWidth: window.innerWidth, maxHeight: window.innerHeight }}\n          id=\"cameraPreview\"\n        />{\" \"}\n        <br />\n        <canvas id=\"capturedFrame\" />\n      </center>\n    );\n  }\n  render() {\n    const { uiType } = this.state;\n    const { classes } = this.props;\n\n    if (uiType === \"computer\") {\n      return this.renderComputer();\n    }\n    if (uiType === \"camera\") {\n      return this.renderCamera();\n    }\n\n    return (\n      <center>\n        <Typography gutterBottom={true} variant=\"h2\">\n          Stop Motion\n        </Typography>\n        <Typography>\n          Is this the UI on a computer/tablet or is it a camera/tablet/phone?\n        </Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={() => this.startComputer()}\n        >\n          Computer\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={() => this.startCamera()}\n        >\n          Camera\n        </Button>\n        <Typography component=\"div\">\n          <div style={{ textAlign: \"left\", maxWidth: \"60ex\" }}>\n            <ReactMarkdown\n              source={`\n\n### About\n\n\nThis is a simple tool for making stop motion animations, with a UI running on a computer/tablet while using a mobile phone or similar as a remote controlled camera. \n\n\n            `}\n            />\n          </div>\n        </Typography>\n      </center>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n\n/*\nexport const chan =\n  window.location.hash.slice(1) ||\n  Math.random()\n    .toString(36)\n    .slice(2);\nasync function openCamera() {\n  console.log(\"here\");\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: true\n    });\n    const video = document.getElementById(\"video\");\n    video.srcObject = stream;\n    video.play();\n    window.stream = stream;\n    video.onclick = () => {\n      const canvas = document.getElementById(\"frame\");\n      console.log(\"capture\", canvas);\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const { data } = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const code = jsQR(data, canvas.width, canvas.height);\n      console.log(\"jsqr\", code);\n    };\n  } catch (e) {\n    console.log(\"video error\", e);\n    console.log(e);\n    throw e;\n  }\n}\n      <button onClick={openCamera}>open camera</button>\n      <video id=\"video\" width={100} />\n      <canvas id=\"frame\" />\n      */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport Immutable from 'immutable';\n\nconst initialState = Immutable.fromJS({hello: 'world'});\nexport const actions = {}\n\nexport function root(state = initialState, action) {\n  if(actions[action.type]) {\n    return actions[action.type](state, action);\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(root, composeEnhancers(applyMiddleware(thunk)));\n\n","import { install as installStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./state\";\nimport \"typeface-roboto\";\ninstallStyles();\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n});\nfunction render() {\n  ReactDOM.render(\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\nrender();\n\nif (module.hot) {\n  module.hot.accept([\"./App\"], render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","const IPFS = require(\"ipfs\");\nexport const node = new IPFS({\n  EXPERIMENTAL: { pubsub: true, dht: true },\n  config: {\n    Addresses: {\n      Swarm: [\n        \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"\n      ]\n    }\n  }\n});\nconst id = Math.random()\n  .toString(36)\n  .slice(2);\nwindow.ipfs = node;\nnode.on(\"ready\", async () => {\n  try {\n    console.log(\"IPFS READY\");\n    await node.pubsub.subscribe(\"solsort-stop-motion\", msg =>\n      console.log(\"pubsub\", new TextDecoder(\"utf-8\").decode(msg.data))\n    );\n    node.pubsub.publish(\n      \"solsort-stop-motion\",\n      Buffer.from(`hello from ${id} ` + window.navigator.userAgent)\n    );\n  } catch (e) {\n    console.log(\"ipfserr\", e);\n  }\n});\nnode.on(\"error\", error => {\n  console.error(\"IPFS Error:\", error);\n});\n"],"sourceRoot":""}