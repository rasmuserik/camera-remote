{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","state.js","index.js"],"names":["App","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","src","logo","alt","href","target","rel","Component","module","exports","__webpack_require__","p","d","__webpack_exports__","register","isLocalhost","Boolean","window","location","hostname","match","config","navigator","URL","process","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","store","redux__WEBPACK_IMPORTED_MODULE_0__","redux_thunk__WEBPACK_IMPORTED_MODULE_1__","initialState","Immutable","fromJS","hello","actions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","arguments","length","undefined","action","type","applyMiddleware","thunk","installStyles","node","require","EXPERIMENTAL","pubsub","dht","Addresses","Swarm","id","Math","random","toString","slice","ipfs","on","Object","_home_rasmuserik_cloud_app_2019q1_stop_motion_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_rasmuserik_cloud_app_2019q1_stop_motion_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","subscribe","msg","TextDecoder","decode","data","setInterval","publish","Buffer","from","userAgent","t0","stop","theme","createMuiTheme","ReactDOM","render","react__WEBPACK_IMPORTED_MODULE_3___default","react_redux__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_7__","_App__WEBPACK_IMPORTED_MODULE_5__","document","getElementById"],"mappings":"4jBAGMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,iCAbEC,aAsBHX,2BCzBfY,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCD,EAAAE,EAAAC,EAAA,sBAAAC,IAYA,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASN,EAASO,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,GAAwBP,OAAOC,SAASd,MACpDqB,SAAWR,OAAOC,SAASO,OAIvC,OAGFR,OAAOS,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAMJ,GAAN,sBAEPT,IAgEV,SAAiCY,EAAON,GAEtCQ,MAAMF,GACHG,KAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5Cd,UAAUe,cAAcC,MAAMR,KAAK,SAAAS,GACjCA,EAAaC,aAAaV,KAAK,WAC7Bb,OAAOC,SAASuB,aAKpBC,EAAgBf,EAAON,KAG1BsB,MAAM,WACLC,QAAQC,IACN,mEArFAC,CAAwBnB,EAAON,GAI/BC,UAAUe,cAAcC,MAAMR,KAAK,WACjCc,QAAQC,IACN,gHAMJH,EAAgBf,EAAON,MAM/B,SAASqB,EAAgBf,EAAON,GAC9BC,UAAUe,cACPvB,SAASa,GACTG,KAAK,SAAAS,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf7B,UAAUe,cAAce,YAI1BR,QAAQC,IACN,iHAKExB,GAAUA,EAAOgC,UACnBhC,EAAOgC,SAASd,KAMlBK,QAAQC,IAAI,sCAGRxB,GAAUA,EAAOiC,WACnBjC,EAAOiC,UAAUf,UAO5BI,MAAM,SAAAY,GACLX,QAAQW,MAAM,4CAA6CA,wCChGjE7C,EAAAE,EAAAC,EAAA,sBAAA2C,IAAA,IAAAC,EAAA/C,EAAA,KAAAgD,EAAAhD,EAAA,KAIMiD,EAJNjD,EAAA,KAIqBkD,EAAUC,OAAO,CAACC,MAAO,UACjCC,EAAU,GAQvB,IAAMC,EAAmB/C,OAAOgD,sCAAwCC,IAC3DV,EAAQW,YAPd,WAA4C,IAA9BhB,EAA8BiB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBT,EAAcY,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,GAAGP,EAAQQ,EAAOC,MAChB,OAAOT,EAAQQ,EAAOC,MAAMrB,EAAOoB,IAKAP,EAAiBS,YAAgBC,yNCLxEC,cAEA,IACMC,EAAO,IADAC,EAAQ,KACR,CAAS,CAACC,aAAc,CAACC,QAAQ,EAAMC,KAAI,GACtD3D,OAAQ,CACJ4D,UAAW,CACLC,MAAO,CACL,wEAIRC,EAAKC,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAC5CtE,OAAOuE,KAAOZ,EAEdA,EAAKa,GAAG,QAARC,OAAAC,EAAA,EAAAD,CAAAE,EAAA9F,EAAA+F,KAAiB,SAAAC,IAAA,OAAAF,EAAA9F,EAAAiG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEfrD,QAAQC,IAAI,cAFGmD,EAAAE,KAAA,EAGTtB,EAAKG,OAAOoB,UAAU,sBAAuB,SAAAC,GAAG,OAAIxD,QAAQC,IAAI,SAAU,IAAIwD,YAAY,SAASC,OAAOF,EAAIG,SAHrG,OAIbC,YAAY,kBACd5B,EAAKG,OAAO0B,QAAQ,sBAAuBC,EAAOC,KAAK,cAAA/E,OAAcuD,EAAd,KAAsBlE,OAAOK,UAAUsF,aACxF,KANSZ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAa,GAAAb,EAAA,SAQbpD,QAAQC,IAAI,UAAZmD,EAAAa,IARa,yBAAAb,EAAAc,SAAAhB,EAAA,kBAWjBlB,EAAKa,GAAG,QAAS,SAAAlC,GACbX,QAAQW,MAAM,cAAeA,KAGjC,IAAMwD,EAAQC,yBAAe,IAE7BC,IAASC,OACHC,EAAArH,EAAAC,cAACqH,EAAA,EAAD,CAAU5D,MAAOA,KACf2D,EAAArH,EAAAC,cAACsH,EAAA,iBAAD,CAAkBN,MAAOA,GACzBI,EAAArH,EAAAC,cAACuH,EAAA,EAAD,QAGEC,SAASC,eAAe,SAWlCnF","file":"static/js/main.a2fc533e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            blah blah\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport Immutable from 'immutable';\n\nconst initialState = Immutable.fromJS({hello: 'world'});\nexport const actions = {}\n\nexport function root(state = initialState, action) {\n  if(actions[action.type]) {\n    return actions[action.type](state, action);\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(root, composeEnhancers(applyMiddleware(thunk)));\n\n","import { install as installStyles } from '@material-ui/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport {Provider} from 'react-redux';\nimport {store} from './state';\n\ninstallStyles();\n\nconst IPFS = require('ipfs')\nconst node = new IPFS({EXPERIMENTAL: {pubsub: true, dht:true},\n  config: {\n      Addresses: {\n            Swarm: [\n              '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star'\n            ]\n          }\n    }})\nconst id = Math.random().toString(36).slice(2);\nwindow.ipfs = node\n \nnode.on('ready', async () => {\n  try {\n  console.log('IPFS READY');\n  await node.pubsub.subscribe('solsort-stop-motion', msg => console.log('pubsub', new TextDecoder(\"utf-8\").decode(msg.data)));\n    setInterval(() =>\n  node.pubsub.publish('solsort-stop-motion', Buffer.from(`hello from ${id} ` + window.navigator.userAgent))\n      , 5000)\n  } catch(e) {\n    console.log('ipfserr', e)\n  }\n})\nnode.on('error', error => {\n    console.error('IPFS Error:', error)\n})\n\nconst theme = createMuiTheme({});\nfunction render() {\nReactDOM.render(\n      <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n        <App />\n</MuiThemeProvider>\n            </Provider> \n        , document.getElementById('root'));\n}\nrender();\n\nif (module.hot) {\n    module.hot.accept(['./App'], render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}