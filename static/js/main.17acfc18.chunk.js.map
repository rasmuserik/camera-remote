{"version":3,"sources":["serviceWorker.js","state.js","index.js","App.js","ipfs.js"],"names":["Boolean","window","location","hostname","match","initialState","Immutable","fromJS","hello","actions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","arguments","length","undefined","action","type","applyMiddleware","thunk","installStyles","theme","createMuiTheme","typography","useNextVariants","ReactDOM","render","react_default","a","createElement","es","styles","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","sleep","ms","Promise","resolve","setTimeout","decode","bytes","JSON","parse","TextDecoder","e","encode","data","Buffer","from","stringify","chan","hash","slice","uiType","msgs","streams","this","setState","Math","random","toString","cons","node","pubsub","subscribe","_ref","Object","_home_rasmuserik_cloud_app_2019_camera_remote_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_rasmuserik_cloud_app_2019_camera_remote_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","msg","id","o","wrap","_context","prev","next","_this2","console","log","concat","_home_rasmuserik_cloud_app_2019_camera_remote_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","recvFrom","recvDate","Date","toISOString","peer","Peer","sending","sender","setInterval","publish","on","to","clearInterval","connected","stream","signal","stop","_x","apply","mediaDevices","getUserMedia","audio","video","srcObject","play","ensureChan","_callee3","canvas","ctx","_ctx$getImageData","code","_context3","_this3","width","videoWidth","height","videoHeight","getContext","drawImage","getImageData","jsQR","replace","computer","initiator","typs","_ref3","_callee4","_context4","t0","t1","t2","sent","call","t3","t4","_x2","_context5","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref5","value","err","return","props","classes","_this$state","qrUrl","href","react__WEBPACK_IMPORTED_MODULE_8___default","map","_ref6","streamUrl","key","style","display","textAlign","float","marginLeft","qrcode_react__WEBPACK_IMPORTED_MODULE_14___default","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11___default","variant","gutterBottom","position","left","top","textShadow","maxWidth","innerWidth","maxHeight","innerHeight","_this4","renderComputer","renderCamera","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_10___default","color","className","button","onClick","startComputer","startCamera","component","react_markdown__WEBPACK_IMPORTED_MODULE_13___default","source","trim","Component","withStyles","margin","spacing","unit","require","EXPERIMENTAL","dht","config","Addresses","Swarm","ipfs","_home_rasmuserik_cloud_app_2019_camera_remote_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","error"],"mappings":"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","file":"static/js/main.17acfc18.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport Immutable from \"immutable\"\n\nconst initialState = Immutable.fromJS({ hello: \"world\" })\nexport const actions = {}\n\nexport function root(state = initialState, action) {\n  if (actions[action.type]) {\n    return actions[action.type](state, action)\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nexport const store = createStore(root, composeEnhancers(applyMiddleware(thunk)))\n","import { install as installStyles } from \"@material-ui/styles\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"./state\"\nimport \"typeface-roboto\"\ninstallStyles()\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n})\nfunction render() {\n  ReactDOM.render(\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n  )\n}\nrender()\n\n/*\nif (module.hot) {\n  module.hot.accept([\"./App\"], render);\n}\n*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { Component } from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport Typography from \"@material-ui/core/Typography\"\nimport jsQR from \"jsqr\"\nimport ReactMarkdown from \"react-markdown\"\nimport QRCode from \"qrcode.react\"\nimport { node } from \"./ipfs\"\nimport Peer from \"simple-peer\"\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit\n  }\n})\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\nfunction decode(bytes) {\n  try {\n    return JSON.parse(new TextDecoder(\"utf-8\").decode(bytes))\n  } catch (e) {\n    return undefined\n  }\n}\nfunction encode(data) {\n  return Buffer.from(JSON.stringify(data))\n}\n\nclass App extends Component {\n  state = {\n    chan: window.location.hash.slice(1) || undefined,\n    uiType: undefined,\n    msgs: [],\n    streams: []\n  }\n  async startComputer() {\n    const peers = {}\n    let { chan } = this.state\n    this.setState({ uiType: \"computer\" })\n\n    if (!chan) {\n      chan = Math.random()\n        .toString(36)\n        .slice(2)\n      this.setState({ chan })\n    }\n\n    const cons = {}\n    await node.pubsub.subscribe(\"solsort-camera-remote-\" + chan, async msg => {\n      const { msgs } = this.state\n      const data = decode(msg.data)\n      console.log(\"solsort-camera-remote-\" + chan, \"data\", data, msg)\n      if (data) {\n        this.setState({\n          msgs: msgs.concat([\n            { recvFrom: msg.from, recvDate: new Date().toISOString(), ...data }\n          ])\n        })\n        if (data.type === \"signal\") {\n          const id = msg.from\n          let o = cons[id]\n          if (!o) {\n            o = { peer: new Peer() }\n\n            o.sending = undefined\n            o.sender = setInterval(\n              () =>\n                o.sending &&\n                node.pubsub.publish(\"solsort-camera-remote-\" + chan, o.sending),\n              8000\n            )\n            o.peer.on(\"signal\", data => {\n              o.sending = encode({ to: id, data })\n              node.pubsub.publish(\"solsort-camera-remote-\" + chan, o.sending)\n            })\n            o.peer.on(\"connect\", () => {\n              delete o.sending\n              clearInterval(o.sender)\n              delete o.sender\n              node.pubsub.publish(\n                \"solsort-camera-remote-\" + chan,\n                encode({ id, connected: true })\n              )\n            })\n            cons[id] = o\n            o.peer.on(\"stream\", stream => {\n              const { streams } = this.state\n              this.setState({ streams: streams.concat([{ stream, id }]) })\n            })\n          }\n\n          o.peer.signal(data.data)\n        }\n      }\n    })\n    /*\n    console.log(\"solsort-camera-remote-\" + chan);\n    setInterval(\n      () =>\n        node.pubsub.publish(\n          \"solsort-camera-remote-\" + chan,\n          encode({\n            ua: window.navigator.userAgent,\n            role: \"computer\",\n            chan,\n            time: new Date().toISOString()\n          })\n        ),\n      5000\n    );\n    */\n  }\n  async startCamera() {\n    try {\n      this.setState({ uiType: \"camera\" })\n      await sleep(300)\n\n      // setup camera\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: true\n      })\n      const video = document.getElementById(\"cameraPreview\")\n      video.srcObject = stream\n      video.play()\n      const ensureChan = async () => {\n        while (!this.state.chan) {\n          await sleep(1000)\n          const canvas = document.getElementById(\"capturedFrame\")\n          canvas.width = video.videoWidth\n          canvas.height = video.videoHeight\n          const ctx = canvas.getContext(\"2d\")\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height)\n          const { data } = ctx.getImageData(0, 0, canvas.width, canvas.height)\n          const code = jsQR(data, canvas.width, canvas.height)\n          if (code) {\n            this.setState({ chan: code.data.replace(/^.*#/, \"\") })\n          }\n        }\n      }\n      await ensureChan()\n      const { chan } = this.state\n\n      // setup ipfs\n      //\n      const computer = new Peer({ initiator: true, stream })\n      let sending = undefined\n      const sender = setInterval(\n        () =>\n          sending &&\n          node.pubsub.publish(\n            \"solsort-camera-remote-\" + chan,\n            encode({\n              typs: \"signal\",\n              data: sending\n            })\n          ),\n        5000\n      )\n\n      await node.pubsub.subscribe(\n        \"solsort-camera-remote-\" + chan,\n        async msg => {\n          const data = decode(msg.data)\n          if (data) {\n            console.log(\"xxx\", data.to, (await node.id()).id)\n            if (data.to === (await node.id()).id) {\n              console.log(\"here!\", msg.data)\n              clearInterval(sender)\n              computer.signal(data.data)\n            }\n          }\n        }\n      )\n      computer.on(\"signal\", data => {\n        sending = data\n        node.pubsub.publish(\n          \"solsort-camera-remote-\" + chan,\n          encode({\n            type: \"signal\",\n            data\n          })\n        )\n      })\n      computer.on(\"connect\", () => console.log(\"CONNECTED\"))\n    } catch (e) {\n      console.log(\"startCamera error\", e)\n      throw e\n    }\n  }\n  componentDidUpdate() {\n    const { streams } = this.state\n    for (const { id, stream } of streams) {\n      const video = document.getElementById(id)\n      console.log(\"didUpdate\", video, stream)\n      video.srcObject = stream\n      video.play()\n    }\n  }\n  renderComputer() {\n    const { classes } = this.props\n    const { chan, msgs, streams } = this.state\n    const qrUrl = window.location.href.replace(/#.*./, \"\") + \"#\" + chan\n    return (\n      <div>\n        {streams.map(({ id, stream, streamUrl }) => (\n          <span key={id}>\n            <video id={id} />\n          </span>\n        ))}\n        <center>\n          <br />\n          <div\n            style={{ display: \"inline-block\", width: 520, textAlign: \"left\" }}\n          >\n            <div style={{ float: \"right\", marginLeft: 8 }}>\n              <QRCode value={qrUrl} />\n            </div>\n            <Typography variant=\"h3\" gutterBottom={true}>\n              Connect camera\n            </Typography>\n            <Typography>\n              To connect a camera, open the web-app, scan the QR-code, or open\n              the following url on your mobile phone / device: <br />{\" \"}\n              <code>{qrUrl}</code>\n              <br />\n            </Typography>\n          </div>\n        </center>\n        <hr />\n        Debug:\n        <pre>{JSON.stringify(msgs, null, 4)}</pre>\n      </div>\n    )\n  }\n  renderCamera() {\n    const { classes } = this.props\n    const { chan } = this.state\n    return (\n      <center>\n        {!chan && (\n          <div\n            style={{\n              position: \"fixed\",\n              left: \"50%\",\n              width: 320,\n              marginLeft: -160,\n              top: 50,\n              display: \"inline-block\",\n              textShadow: \"1px 1px 4px white\"\n            }}\n          >\n            <Typography variant=\"h4\" gutterBottom={true}>\n              Point the camera to the QR-code on the computer to connect.\n            </Typography>\n          </div>\n        )}\n        <video\n          style={{ maxWidth: window.innerWidth, maxHeight: window.innerHeight }}\n          id=\"cameraPreview\"\n        />{\" \"}\n        <br />\n        <canvas id=\"capturedFrame\" />\n      </center>\n    )\n  }\n  render() {\n    const { uiType } = this.state\n    const { classes } = this.props\n\n    if (uiType === \"computer\") {\n      return this.renderComputer()\n    }\n    if (uiType === \"camera\") {\n      return this.renderCamera()\n    }\n\n    return (\n      <center>\n        <Typography gutterBottom={true} variant=\"h2\">\n          Camera Remote\n        </Typography>\n        <Typography>\n          Is this the UI on a computer/tablet or is it a camera/tablet/phone?\n        </Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={() => this.startComputer()}\n        >\n          Computer\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={() => this.startCamera()}\n        >\n          Camera\n        </Button>\n        <Typography component=\"div\">\n          <div style={{ textAlign: \"left\", maxWidth: \"60ex\" }}>\n            <ReactMarkdown\n              source={`\n### About\n\nThis is a simple tool for connecting a UI running on a computer/tablet with the camera of a mobile phone or similar. No-server proof of concept using IPFS/WebRTC. This experiment might be used for a stop-motion web/app later on.\n            `.trim()}\n            />\n          </div>\n        </Typography>\n      </center>\n    )\n  }\n}\n\nexport default withStyles(styles)(App)\n\n/*\nexport const chan =\n  window.location.hash.slice(1) ||\n  Math.random()\n    .toString(36)\n    .slice(2);\nasync function openCamera() {\n  console.log(\"here\");\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: true\n    });\n    const video = document.getElementById(\"video\");\n    video.srcObject = stream;\n    video.play();\n    window.stream = stream;\n    video.onclick = () => {\n      const canvas = document.getElementById(\"frame\");\n      console.log(\"capture\", canvas);\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const { data } = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const code = jsQR(data, canvas.width, canvas.height);\n      console.log(\"jsqr\", code);\n    };\n  } catch (e) {\n    console.log(\"video error\", e);\n    console.log(e);\n    throw e;\n  }\n}\n      <button onClick={openCamera}>open camera</button>\n      <video id=\"video\" width={100} />\n      <canvas id=\"frame\" />\n      */\n","const IPFS = require(\"ipfs\")\nexport const node = new IPFS({\n  EXPERIMENTAL: { pubsub: true, dht: true },\n  config: {\n    Addresses: {\n      Swarm: [\n        \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"\n      ]\n    }\n  }\n})\nconst id = Math.random()\n  .toString(36)\n  .slice(2)\nwindow.ipfs = node\nnode.on(\"ready\", async () => {\n  try {\n    console.log(\"IPFS READY\")\n    /*\n    await node.pubsub.subscribe(\"solsort-camera-remote\", msg =>\n      console.log(\"pubsub\", new TextDecoder(\"utf-8\").decode(msg.data))\n    );\n    setInterval(() =>\n    node.pubsub.publish(\n      \"solsort-camera-remote\",\n      Buffer.from(`hello from ${id} ` + window.navigator.userAgent)\n    ), 5000);\n    */\n  } catch (e) {\n    console.log(\"ipfserr\", e)\n  }\n})\nnode.on(\"error\", error => {\n  console.error(\"IPFS Error:\", error)\n})\n"],"sourceRoot":""}